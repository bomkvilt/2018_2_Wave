// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package platform

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5822a332DecodeWaveAppsPlatform(in *jlexer.Lexer, out *ctgsCrutch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categories":
			(out.Categories).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5822a332EncodeWaveAppsPlatform(out *jwriter.Writer, in ctgsCrutch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Categories).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ctgsCrutch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5822a332EncodeWaveAppsPlatform(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ctgsCrutch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5822a332EncodeWaveAppsPlatform(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ctgsCrutch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5822a332DecodeWaveAppsPlatform(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ctgsCrutch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5822a332DecodeWaveAppsPlatform(l, v)
}
func easyjson5822a332DecodeWaveAppsPlatform1(in *jlexer.Lexer, out *configDB) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "database":
			out.Database = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5822a332EncodeWaveAppsPlatform1(out *jwriter.Writer, in configDB) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"database\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Database))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v configDB) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5822a332EncodeWaveAppsPlatform1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v configDB) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5822a332EncodeWaveAppsPlatform1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *configDB) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5822a332DecodeWaveAppsPlatform1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *configDB) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5822a332DecodeWaveAppsPlatform1(l, v)
}
func easyjson5822a332DecodeWaveAppsPlatform2(in *jlexer.Lexer, out *appsCrutch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apps":
			(out.Apps).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5822a332EncodeWaveAppsPlatform2(out *jwriter.Writer, in appsCrutch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Apps).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v appsCrutch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5822a332EncodeWaveAppsPlatform2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v appsCrutch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5822a332EncodeWaveAppsPlatform2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *appsCrutch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5822a332DecodeWaveAppsPlatform2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *appsCrutch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5822a332DecodeWaveAppsPlatform2(l, v)
}
func easyjson5822a332DecodeWaveAppsPlatform3(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "db":
			(out.DB).UnmarshalEasyJSON(in)
		case "port":
			out.Port = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5822a332EncodeWaveAppsPlatform3(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"db\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.DB).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Port))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5822a332EncodeWaveAppsPlatform3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5822a332EncodeWaveAppsPlatform3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5822a332DecodeWaveAppsPlatform3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5822a332DecodeWaveAppsPlatform3(l, v)
}
