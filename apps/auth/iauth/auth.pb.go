// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iauth/auth.proto

package iauth

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// User credentionals
type User struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a8941495ad7c78, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Default status message
type Status struct {
	BOK                  bool     `protobuf:"varint,1,opt,name=bOK,proto3" json:"bOK,omitempty"`
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a8941495ad7c78, []int{1}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetBOK() bool {
	if m != nil {
		return m.BOK
	}
	return false
}

func (m *Status) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// Cookie
type Cookie struct {
	Cookie               string   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Status               *Status  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cookie) Reset()         { *m = Cookie{} }
func (m *Cookie) String() string { return proto.CompactTextString(m) }
func (*Cookie) ProtoMessage()    {}
func (*Cookie) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a8941495ad7c78, []int{2}
}

func (m *Cookie) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cookie.Unmarshal(m, b)
}
func (m *Cookie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cookie.Marshal(b, m, deterministic)
}
func (m *Cookie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cookie.Merge(m, src)
}
func (m *Cookie) XXX_Size() int {
	return xxx_messageInfo_Cookie.Size(m)
}
func (m *Cookie) XXX_DiscardUnknown() {
	xxx_messageInfo_Cookie.DiscardUnknown(m)
}

var xxx_messageInfo_Cookie proto.InternalMessageInfo

func (m *Cookie) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *Cookie) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "iauth.User")
	proto.RegisterType((*Status)(nil), "iauth.Status")
	proto.RegisterType((*Cookie)(nil), "iauth.Cookie")
}

func init() { proto.RegisterFile("iauth/auth.proto", fileDescriptor_69a8941495ad7c78) }

var fileDescriptor_69a8941495ad7c78 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x6a, 0x02, 0x31,
	0x10, 0x86, 0xdd, 0xda, 0x0d, 0x76, 0x44, 0x90, 0x39, 0x14, 0xd9, 0x53, 0x09, 0x08, 0x1e, 0xec,
	0x16, 0xec, 0xbd, 0x20, 0x1e, 0xca, 0xd2, 0x05, 0x61, 0x4b, 0x1f, 0x20, 0xae, 0x61, 0x5d, 0x4a,
	0x77, 0x24, 0x99, 0xd0, 0x27, 0xeb, 0xfb, 0x95, 0x64, 0xa3, 0xe0, 0x69, 0x2f, 0x61, 0xfe, 0xf9,
	0xe7, 0xcb, 0x3f, 0x09, 0xcc, 0x5b, 0xe5, 0xf8, 0xf4, 0xe2, 0x8f, 0xfc, 0x6c, 0x88, 0x09, 0xd3,
	0xd0, 0x91, 0x6f, 0x70, 0xff, 0x65, 0xb5, 0xc1, 0x0c, 0x26, 0xce, 0x6a, 0xd3, 0xa9, 0x1f, 0xbd,
	0x48, 0x9e, 0x92, 0xd5, 0x43, 0x75, 0xd5, 0xde, 0x3b, 0x2b, 0x6b, 0x7f, 0xc9, 0x1c, 0x17, 0x77,
	0xbd, 0x77, 0xd1, 0x72, 0x0d, 0xe2, 0x93, 0x15, 0x3b, 0x8b, 0x73, 0x18, 0x1f, 0xf6, 0x1f, 0x01,
	0x9e, 0x54, 0xbe, 0xf4, 0x1d, 0xd7, 0xf6, 0xc8, 0xb8, 0xf2, 0xa5, 0x7c, 0x07, 0xb1, 0x23, 0xfa,
	0x6e, 0x35, 0x3e, 0x82, 0xa8, 0x43, 0x15, 0xd3, 0xa2, 0xc2, 0x25, 0x08, 0x1b, 0xee, 0x0b, 0xd8,
	0x74, 0x33, 0xcb, 0xc3, 0x9e, 0x79, 0x1f, 0x52, 0x45, 0x73, 0xf3, 0x97, 0x40, 0x5a, 0x6c, 0x1d,
	0x9f, 0xf0, 0x19, 0x66, 0x3b, 0xa3, 0x15, 0xeb, 0x6d, 0x5d, 0x2b, 0xd7, 0x31, 0x4e, 0x23, 0xe1,
	0x9f, 0x95, 0x5d, 0xf0, 0x3e, 0x55, 0x8e, 0x70, 0x09, 0x69, 0x49, 0x4d, 0xd1, 0x0d, 0x8c, 0xad,
	0x40, 0x94, 0xd4, 0xec, 0x1d, 0xe3, 0xad, 0x95, 0xdd, 0xee, 0x23, 0x47, 0xb8, 0x06, 0x28, 0x6c,
	0x49, 0x4d, 0xa3, 0x8f, 0x45, 0x37, 0x34, 0x7d, 0x10, 0xe1, 0xf3, 0x5f, 0xff, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x80, 0xdc, 0x05, 0x15, 0x90, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IAuthClient is the client API for IAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAuthClient interface {
	CreateAccaunt(ctx context.Context, in *User, opts ...grpc.CallOption) (*Cookie, error)
	LogIn(ctx context.Context, in *User, opts ...grpc.CallOption) (*Cookie, error)
	LogOut(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Status, error)
	IsLoggedIn(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Status, error)
}

type iAuthClient struct {
	cc *grpc.ClientConn
}

func NewIAuthClient(cc *grpc.ClientConn) IAuthClient {
	return &iAuthClient{cc}
}

func (c *iAuthClient) CreateAccaunt(ctx context.Context, in *User, opts ...grpc.CallOption) (*Cookie, error) {
	out := new(Cookie)
	err := c.cc.Invoke(ctx, "/iauth.IAuth/CreateAccaunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAuthClient) LogIn(ctx context.Context, in *User, opts ...grpc.CallOption) (*Cookie, error) {
	out := new(Cookie)
	err := c.cc.Invoke(ctx, "/iauth.IAuth/LogIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAuthClient) LogOut(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/iauth.IAuth/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAuthClient) IsLoggedIn(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/iauth.IAuth/IsLoggedIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAuthServer is the server API for IAuth service.
type IAuthServer interface {
	CreateAccaunt(context.Context, *User) (*Cookie, error)
	LogIn(context.Context, *User) (*Cookie, error)
	LogOut(context.Context, *Cookie) (*Status, error)
	IsLoggedIn(context.Context, *Cookie) (*Status, error)
}

func RegisterIAuthServer(s *grpc.Server, srv IAuthServer) {
	s.RegisterService(&_IAuth_serviceDesc, srv)
}

func _IAuth_CreateAccaunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAuthServer).CreateAccaunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iauth.IAuth/CreateAccaunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAuthServer).CreateAccaunt(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAuth_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAuthServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iauth.IAuth/LogIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAuthServer).LogIn(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAuth_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cookie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAuthServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iauth.IAuth/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAuthServer).LogOut(ctx, req.(*Cookie))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAuth_IsLoggedIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cookie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAuthServer).IsLoggedIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iauth.IAuth/IsLoggedIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAuthServer).IsLoggedIn(ctx, req.(*Cookie))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iauth.IAuth",
	HandlerType: (*IAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccaunt",
			Handler:    _IAuth_CreateAccaunt_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _IAuth_LogIn_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _IAuth_LogOut_Handler,
		},
		{
			MethodName: "IsLoggedIn",
			Handler:    _IAuth_IsLoggedIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iauth/auth.proto",
}
