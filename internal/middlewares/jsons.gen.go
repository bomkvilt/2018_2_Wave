// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package middlewares

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5822a332DecodeWaveInternalMiddlewares(in *jlexer.Lexer, out *corsConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origins":
			if in.IsNull() {
				in.Skip()
				out.Origins = nil
			} else {
				in.Delim('[')
				if out.Origins == nil {
					if !in.IsDelim(']') {
						out.Origins = make([]string, 0, 4)
					} else {
						out.Origins = []string{}
					}
				} else {
					out.Origins = (out.Origins)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Origins = append(out.Origins, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "headers":
			if in.IsNull() {
				in.Skip()
				out.Headers = nil
			} else {
				in.Delim('[')
				if out.Headers == nil {
					if !in.IsDelim(']') {
						out.Headers = make([]string, 0, 4)
					} else {
						out.Headers = []string{}
					}
				} else {
					out.Headers = (out.Headers)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Headers = append(out.Headers, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "methods":
			if in.IsNull() {
				in.Skip()
				out.Methods = nil
			} else {
				in.Delim('[')
				if out.Methods == nil {
					if !in.IsDelim(']') {
						out.Methods = make([]string, 0, 4)
					} else {
						out.Methods = []string{}
					}
				} else {
					out.Methods = (out.Methods)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Methods = append(out.Methods, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "credentials":
			out.Credentials = bool(in.Bool())
		case "option_pass":
			out.OptionsPass = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5822a332EncodeWaveInternalMiddlewares(out *jwriter.Writer, in corsConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"origins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Origins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Origins {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"headers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Headers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Headers {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"methods\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Methods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Methods {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"credentials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Credentials))
	}
	{
		const prefix string = ",\"option_pass\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OptionsPass))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v corsConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5822a332EncodeWaveInternalMiddlewares(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v corsConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5822a332EncodeWaveInternalMiddlewares(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *corsConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5822a332DecodeWaveInternalMiddlewares(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *corsConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5822a332DecodeWaveInternalMiddlewares(l, v)
}
func easyjson5822a332DecodeWaveInternalMiddlewares1(in *jlexer.Lexer, out *authConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "adress":
			out.Adress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5822a332EncodeWaveInternalMiddlewares1(out *jwriter.Writer, in authConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"adress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Adress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v authConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5822a332EncodeWaveInternalMiddlewares1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v authConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5822a332EncodeWaveInternalMiddlewares1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *authConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5822a332DecodeWaveInternalMiddlewares1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *authConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5822a332DecodeWaveInternalMiddlewares1(l, v)
}
