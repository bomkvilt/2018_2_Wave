// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package manager

import (
	room "Wave/application/room"
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2c14bDecodeWaveApplicationManager(in *jlexer.Lexer, out *roomTypePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "room_type":
			out.RoomType = room.RoomType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2c14bEncodeWaveApplicationManager(out *jwriter.Writer, in roomTypePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"room_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RoomType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v roomTypePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2c14bEncodeWaveApplicationManager(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v roomTypePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2c14bEncodeWaveApplicationManager(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *roomTypePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2c14bDecodeWaveApplicationManager(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *roomTypePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2c14bDecodeWaveApplicationManager(l, v)
}
func easyjsonD2c14bDecodeWaveApplicationManager1(in *jlexer.Lexer, out *roomTokenPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "room_token":
			out.RoomToken = room.RoomToken(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2c14bEncodeWaveApplicationManager1(out *jwriter.Writer, in roomTokenPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"room_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RoomToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v roomTokenPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2c14bEncodeWaveApplicationManager1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v roomTokenPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2c14bEncodeWaveApplicationManager1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *roomTokenPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2c14bDecodeWaveApplicationManager1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *roomTokenPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2c14bDecodeWaveApplicationManager1(l, v)
}
func easyjsonD2c14bDecodeWaveApplicationManager2(in *jlexer.Lexer, out *roomInfoPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "room_token":
			out.RoomToken = room.RoomToken(in.String())
		case "room_type":
			out.RoomType = room.RoomType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2c14bEncodeWaveApplicationManager2(out *jwriter.Writer, in roomInfoPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"room_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RoomToken))
	}
	{
		const prefix string = ",\"room_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RoomType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v roomInfoPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2c14bEncodeWaveApplicationManager2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v roomInfoPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2c14bEncodeWaveApplicationManager2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *roomInfoPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2c14bDecodeWaveApplicationManager2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *roomInfoPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2c14bDecodeWaveApplicationManager2(l, v)
}
